name: cleanup

# ! If you want to use this workflow, the NPM_TOKEN secret must be defined!

on:
  workflow_dispatch: # * Treated like a `delete` event
  delete:

env:
  # * Selectively enable debugger verbose output in the pipeline
  # ? See also: https://www.npmjs.com/package/debug#wildcards
  # DEBUG: '@xunnamius/dummy-pkg-2:*'
  NODE_CURRENT_VERSION: 15.x
  IGNORE_TAGS: 'latest' # example: IGNORE_TAGS: 'tag1, tag2, tag-3'
  # ! These also have to be updated in .changelogrc.js and build-test-deploy.yml
  CI_SKIP_REGEX: '\[skip ci\]|\[ci skip\]'
  # ? Add your GitHub user/org to enable this pipeline workflow
  # ? (you'll need to provide your own secrets or the pipeline will error)
  REPO_OWNER_WHITELIST: xunnamius, ergodark, nhscc

jobs:
  metadata:
    name: 'gather-metadata'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      should-skip-ci: ${{ steps.skip-ci.outputs.should-skip == 'true' }}
      has-proper-owner: ${{ steps.owner.outputs.is-whitelisted }}
      has-release-config: ${{ steps.data.outputs.has-release-config == 'true' }}
    steps:
      - name: Report DEBUG mode status
        run: |
          if ! [ -z "$DEBUG" ]; then
            echo 'PIPELINE IS RUNNING IN DEBUG MODE!'
          else
            echo '(pipeline is not running in debug mode)'
          fi

      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1 # ! We only skip if the tippy top commit says so!

      - name: Determine should-skip
        id: skip-ci
        run: |
          set +e
          LAST_COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          ! [ -z "$DEBUG" ] && echo "LAST_COMMIT_MSG=$LAST_COMMIT_MSG" || true

          echo "$LAST_COMMIT_MSG" | grep -qE "$CI_SKIP_REGEX"
          [ $? -ne 0 ] && CI_SKIP=false || CI_SKIP=true
          ! [ -z "$DEBUG" ] && echo "CI_SKIP=$CI_SKIP" || true

          echo "::set-output name=should-skip::$CI_SKIP"
          ! [ -z "$DEBUG" ] && echo "set-output name=should-skip::$CI_SKIP" || true

      - name: Verify repository owner against whitelist
        if: steps.skip-ci.outputs.should-skip != 'true'
        id: owner
        run: |
          set +e
          WL='${{ env.REPO_OWNER_WHITELIST }}'
          REPO='${{ github.repository }}'
          node -e "process.exit('$WL'.toLowerCase().split(',').some(o => '$REPO'.toLowerCase().startsWith(o.trim() + '/')) ? 0 : 1)"
          echo "::set-output name=is-whitelisted::$([ $? -eq 0 ] && echo 'true' || echo 'false')"
          ! [ -z "$DEBUG" ] && echo "set-output name=is-whitelisted::$([ $? -eq 0 ] && echo 'true' || echo 'false')" || true

      - name: Gather remaining metadata
        if: steps.skip-ci.outputs.should-skip != 'true'
        id: data
        run: |
          set +e
          [ -r release.config.js ] && echo "::set-output name=has-release-config::true"
          ! [ -z "$DEBUG" ] && [ -r release.config.js ] && echo "set-output name=has-release-config::true" || true

  cleanup-npm-dist-tags:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: metadata
    if: |
      needs.metadata.outputs.should-skip-ci != 'true'
      && needs.metadata.outputs.has-proper-owner == 'true'
      && needs.metadata.outputs.has-release-config == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Reconfigure git auth
        run:
          git config --global url."https://${{ secrets.GH_TOKEN
          }}@github.com/".insteadOf ssh://git@github.com/

      - name: Use node ${{ env.NODE_CURRENT_VERSION }}
        uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{ env.NODE_CURRENT_VERSION }}

      - name: Cache npm
        uses: actions/cache@v2.1.4
        id: cache-npm-clean
        with:
          key: npm-clean-${{ runner.os }}
          path: ~/.npm

      - name: Prune dist tags
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          set +e
          npm install --no-save micromatch
          git remote prune origin
          BRANCHES=`git for-each-ref --format='%(refname:lstrip=3)' refs/remotes/origin`
          ! [ -z "$DEBUG" ] && echo "BRANCHES=$BRANCHES" || true
          export BRANCHES
          PKG_NAME=`node -e 'console.log(require("./package.json").name)'`
          ! [ -z "$DEBUG" ] && echo "PKG_NAME=$PKG_NAME" || true
          DIST_TAGS=`npm dist-tag list "$PKG_NAME" 2>/dev/null`
          ! [ -z "$DEBUG" ] && echo "DIST_TAGS=$DIST_TAGS" || true
          export DIST_TAGS
          MATCHED_TAGS=$(node -e 'const match = require("micromatch"); const tags = process.env.DIST_TAGS.split("\n").map(t => t.split(":")[0]); const branches = match(process.env.BRANCHES.split("\n"), require("./release.config.js").branches.reduce((a,b) => [...a, b.name || b.toString()], [])); const ignoreTags = process.env.IGNORE_TAGS.split(", "); console.log(tags.reduce((a,t) => branches.some(b => ignoreTags.includes(t) || t == b || t == `release-${b}`) ? a : [...a, t], []).join(" ").trim())')
          ! [ -z "$DEBUG" ] && echo "MATCHED_TAGS=$MATCHED_TAGS" || true
          if ! [ -z "$MATCHED_TAGS" ]; then echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc; echo $MATCHED_TAGS | xargs -n1 npm dist-tag rm "$PKG_NAME"; else echo "dist tags OK!"; fi
