name: post-release-check

on:
  workflow_dispatch: # * Treated like a `release` event
  release:
    types: [published]

env:
  # * Selectively enable debugger verbose output in the pipeline
  # ? See also: https://www.npmjs.com/package/debug#wildcards
  # DEBUG: '@xunnamius/dummy-pkg-2:*'
  NODE_CURRENT_VERSION: 18.x
  NODE_TEST_VERSIONS: '"14.x", "16.x"' # * NODE_CURRENT_VERSION included automatically

jobs:
  metadata:
    name: 'gather-metadata'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      node-matrix: ${{ steps.set-matrix.outputs.node-matrix }}
    steps:
      - name: Report DEBUG mode status
        run: |
          if ! [ -z "$DEBUG" ]; then
            echo 'PIPELINE IS RUNNING IN DEBUG MODE!'
          else
            echo '(pipeline is not running in debug mode)'
          fi

      - name: Determine matrix
        id: set-matrix
        run: |
          echo "::set-output name=node-matrix::{\"node\":[$NODE_TEST_VERSIONS, \"$NODE_CURRENT_VERSION\"]}"
          ! [ -z "$DEBUG" ] && echo "set-output name=node-matrix::{\"node\":[$NODE_TEST_VERSIONS, \"$NODE_CURRENT_VERSION\"]}" || true

  sleep:
    name: 'five-minute-sleep'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Give result of npm publish time to propagate
        uses: kibertoad/wait-action@1.0.1
        with:
          time: '5m'

  check-compat:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      - metadata
      - sleep
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.metadata.outputs.node-matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Use node ${{ matrix.node }}
        uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{ matrix.node }}

      - name: Test install package
        run: |
          PKG_PRIVATE=`node -e 'console.log(require("./package.json").private || "false")'`
          PKG_NAME=`node -e 'console.log(require("./package.json").name)'`
          PKG_VERSION=`node -e 'console.log(require("./package.json").version)'`
          PKG_BIN=`node -e 'const bin = require("./package.json").bin; bin && console.log(Object.entries(bin)[0][0])'`

          ! [ -z "$DEBUG" ] && echo "PKG_PRIVATE=$PKG_PRIVATE" || true
          ! [ -z "$DEBUG" ] && echo "PKG_NAME=$PKG_NAME" || true
          ! [ -z "$DEBUG" ] && echo "PKG_VERSION=$PKG_VERSION" || true
          ! [ -z "$DEBUG" ] && echo "PKG_BIN=$PKG_BIN" || true

          if [ "$PKG_PRIVATE" = "false" ]; then
            export NODE_ENV=production
            mkdir /tmp/post-release-check
            cd /tmp/post-release-check
            npm install "${PKG_NAME}@${PKG_VERSION}"
            ! [ -z "$PKG_BIN" ] && npx --no-install $PKG_BIN --help || true
          fi
